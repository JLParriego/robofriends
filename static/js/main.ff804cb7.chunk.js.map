{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAmCeA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACE,sBAAKC,UAAU,mDAAf,UACE,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACE,6BAAKF,IACL,4BAAIC,WCEGK,EAjBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,8BACGA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACE,cAAC,EAAD,CAEER,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCGFC,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,qBAAKT,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVU,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCHHI,EAXA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,YCiBJC,E,kDAnBb,WAAYN,GAAQ,IAAD,8BACjB,cAAMA,IACDO,MAAQ,CACXC,UAAU,GAHK,E,8DAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAKG,KAAKC,SAASJ,UAAW,GACrB,qDAEFG,KAAKX,MAAMK,a,GAhBKQ,aCqFZC,G,wDA1Cb,aAAe,IAAD,8BACZ,gBAaFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAb1C,EAAKZ,MAAQ,CACXjB,OAAQ,GACR2B,YAAa,IAJH,E,gEAQO,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKZ,SAAS,CAAEtB,OAAQkC,S,+BAOnC,IAAD,OACDC,EAAiBd,KAAKJ,MAAMjB,OAAOoC,QAAO,SAACC,GAC/C,OAAOA,EAAM5C,KACV6C,oBACAC,SAAS,EAAKtB,MAAMU,YAAYW,wBAErC,OAAiC,IAA7BjB,KAAKJ,MAAMjB,OAAOwC,OACb,yCAGL,sBAAK5C,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWS,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAUzB,OAAQmC,e,GAlCdZ,cChCHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCOdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACG,cAAC,EAAD,MAEHC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ff804cb7.chunk.js","sourcesContent":["import React from \"react\";\n\n/*\n- Write JSX code inside return()\n- Call robohash API\n- Return only returns one element\n- Apply tachyons classes to the div className (css)\n- Add props id, name and email to the card (dynamic source of data {})\n- Destructure the props:\n    const name = props.name\n    const email = props.email\n    const id = props.id\nis equivalent to:\n    const { name, email, id } = props;\n\nand equivalent to instead of use:\n        const Card = (props) => {\n        const { name, email, id } = props;\nuse this:\n         const Card = ({name, email, id})   \n\n         */\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\n/* \nconst robots = props.robots\n- map robots array and create one card per robot(user)\n- give a unique key to each Card\n- pass in each Card an object, one robot, key, id, name and email from robots array\nEquivalent:\n  1 const robots = props.robots\n  2 const {robots} = props\n  3 const CardList = ({robots})\n*/\n\nconst CardList = ({ robots }) => {\n  return (\n    <div>\n      {robots.map((user, i) => {\n        return (\n          <Card\n            key={i}\n            id={robots[i].id}\n            name={robots[i].name}\n            email={robots[i].email}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\n\n/* \nWe capture the user input with the Onchange Event\nWhen that happens we call the searchChange method passed from the the App.js\n\n*/\n\nconst SearchBox = ({searchChange}) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n      \n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n//{{}}object inside JSX expression\nconst Scroll = (props) => {\n    return(\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n\n\n    )\n\n}\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if ((this.setState.hasError = true)) {\n      return <h1> There is an error </h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from \"react\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundry from \"../components/ErrorBoundry\";\nimport \"../containers/App.css\";\n\n/* \n\n**class App extends Component**\n- Create class App inherited from Component\n- Create the constructor for the State\n- Call super() to inherit constructor from Component\n- Add to the state an empty array: robots\n- Add to the state an empty string: searchfield\n-- this points to App\n\n** componentDidMount**\n- Fetch an array of data from an API\n- Transform into a json\n- Add this array to robots array inside the state\n\n**OnSearchChange**\n- This fx capture user input collected by event and add to searchfield into the state\n- Pass OnSearchChange method as a property into the SearchBox Component as searchChange attribute\n- filteredRobots take robots array and filter it with the searchfield content\n\n**Render**\n- Create filteredRobots array filtering the elements of robots array with the searchfield string\n- If we have problems loading data from API, show loading in the screen\n- Pass to SearchBox Component onSearchChange method as a property\n- Pass to CardList Component filteredRobots array as a property\n- Render the Cardlist Component inside of a Scroll Component\n- Handle errors in Cardlist with ErrorBoundry Component\n\n\n\nState = memory in our app,\nState = object that describes our application\nState says the things that can change\nProps are things that came from the State\n\n*/\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchfield: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ robots: users }));\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n  };\n\n  render() {\n    const filteredRobots = this.state.robots.filter((robot) => {\n      return robot.name\n        .toLocaleLowerCase()\n        .includes(this.state.searchfield.toLocaleLowerCase());\n    });\n    if (this.state.robots.length === 0) {\n      return <h1>Loading</h1>;\n    } else {\n      return (\n        <div className=\"tc\">\n          <h1 className=\"f1\">RoboFriends</h1>\n          <SearchBox searchChange={this.onSearchChange} />\n          <Scroll>\n            <ErrorBoundry>\n              <CardList robots={filteredRobots} />\n            </ErrorBoundry>\n          </Scroll>\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from './containers/App';\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"tachyons\";\n\n\n/* \nI want reactDom package to use the fx render\nto render the App that is inside the fx\nRender CardList and pass as a property call robots the array robots from robots.js\n\n*/\nReactDOM.render(\n  <React.StrictMode>\n     <App /> \n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}